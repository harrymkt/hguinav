<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation on UI Navigation</title>
    <link>https://harrymkt.github.io/hguinav/docs/</link>
    <description>Recent content in Documentation on UI Navigation</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://harrymkt.github.io/hguinav/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Writing</title>
      <link>https://harrymkt.github.io/hguinav/docs/writing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://harrymkt.github.io/hguinav/docs/writing/</guid>
      <description>&lt;h1 id=&#34;writing&#34;&gt;Writing&lt;/h1&gt;&#xA;&lt;p&gt;You can use the following variables to replace with something else. Variables are enclosed by &lt;code&gt;%variable_name%&lt;/code&gt; where variable_name is the name of available variables you want. This feature can be used in content files where the &lt;a href=&#34;https://harrymkt.github.io/hguinav/hguinav/docs/partials/content/&#34;&gt;content partial&lt;/a&gt; is used, such as documentation sections, home page, blog, etc.&lt;/p&gt;&#xA;&lt;p&gt;To display the raw of the variable name itself, prefix with &lt;code&gt;/&lt;/code&gt;. For example, %//title%&lt;/p&gt;&#xA;&lt;p&gt;Be warned that failure to retrieve the variable will render that string directly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blocks</title>
      <link>https://harrymkt.github.io/hguinav/docs/blocks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://harrymkt.github.io/hguinav/docs/blocks/</guid>
      <description>&lt;h1 id=&#34;blocks&#34;&gt;Blocks&lt;/h1&gt;&#xA;&lt;p&gt;Sometimes partial files are not enough. Or will they be cluttered? Blocks come in. You can define blocks to display content in position the block is defined in the base template. Here are available blocks that you can use to customize further:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;title&lt;/code&gt;: The title block. This should be completely optional anyway. For example you can use this block combined with &lt;a href=&#34;https://harrymkt.github.io/hguinav/hguinav/docs/partials/title/&#34;&gt;title partial&lt;/a&gt; to ease the management of the page title which asumes the site title should be appended after it.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;beforeheader&lt;/code&gt;: Content before header, or another word, content immediately following the body tag.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;extraheader&lt;/code&gt;: Content after the header defined in header.html (partial).&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;main&lt;/code&gt;: The main content.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;extrafooter&lt;/code&gt;: Content close to body end. Usually empty.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Author Management Via Taxonomy</title>
      <link>https://harrymkt.github.io/hguinav/docs/author-taxonomy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://harrymkt.github.io/hguinav/docs/author-taxonomy/</guid>
      <description>&lt;h1 id=&#34;title&#34;&gt;%title%&lt;/h1&gt;&#xA;&lt;p&gt;You can have taxonomy based author management system. Create each author section in &lt;code&gt;content/authors/author_name/_index.md&lt;/code&gt;, and looks like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;title: &amp;quot;Author name&amp;quot;&#xA;role: admin&#xA;---&#xA;I&#39;m the maintainer of this site (optional byo)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Content processing here - is also done by the &lt;a href=&#34;https://harrymkt.github.io/hguinav/hguinav/docs/partials/content/&#34;&gt;content partial&lt;/a&gt; which as support for &lt;a href=&#34;https://harrymkt.github.io/hguinav/hguinav/docs/writing/&#34;&gt;variable replacements&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Please note that you do not need to create section for that author if you are not adding custom metadata for them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentation Site</title>
      <link>https://harrymkt.github.io/hguinav/docs/documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://harrymkt.github.io/hguinav/docs/documentation/</guid>
      <description>&lt;h1 id=&#34;documentation-site&#34;&gt;Documentation Site&lt;/h1&gt;&#xA;&lt;p&gt;Hguinav supports built-in documentation template that allows you to create list base documentation pages. Each section, starting at content/, you can create a subsection documentation. You can also look the docs folder of this theme demo.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: documentation uses both Weight and Title sort styles by default. Please note that when using weight, you also need to set for subsections. Remember that Hugo does not support sorting for specific section. As such, a custom &lt;a href=&#34;https://harrymkt.github.io/hguinav/hguinav/docs/partials/sort/&#34;&gt;sort partial&lt;/a&gt; is the actual work implemented in Hguinav.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Search</title>
      <link>https://harrymkt.github.io/hguinav/docs/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://harrymkt.github.io/hguinav/docs/search/</guid>
      <description>&lt;h1 id=&#34;search&#34;&gt;Search&lt;/h1&gt;&#xA;&lt;p&gt;Hguinav has search built-in. This is a quick overview on how to create your search.&lt;/p&gt;&#xA;&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;&#xA;&lt;p&gt;These configurations apply on &lt;code&gt;params&lt;/code&gt; object of the config. See &lt;a href=&#34;https://harrymkt.github.io/hguinav/hguinav/docs/params/config/#search&#34;&gt;search configuration&lt;/a&gt; for more information and supported configuration options.&lt;/p&gt;&#xA;&lt;h2 id=&#34;sformats&#34;&gt;Search Formats&lt;/h2&gt;&#xA;&lt;h3 id=&#34;lunr&#34;&gt;lunr&lt;/h3&gt;&#xA;&lt;p&gt;This uses JSON file to produce the search content and thus slower and not available for very large content.&lt;/p&gt;&#xA;&lt;details&gt;&#xA;  &lt;summary&gt;Setup details for lunr format&lt;/summary&gt;&#xA;  &lt;h4 id=&#34;setup-for-search-page-generation-only-for-lunr-format&#34;&gt;Setup for search page generation (only for lunr format)&lt;/h4&gt;&#xA;&lt;p&gt;First, remember the following:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
